package com.authorId.modId;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.block.state.pattern.BlockMatcher;
import net.minecraft.block.SoundType;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenMinable;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class ElementHereOre {
	
	//Variables
	public static ElementHereOreBlock elementHere_ore;
	public static Object instance;
	
	//Constructor
	public ElementHereOre() {
		
	}
	
	//Other Methods
	public void generateSurface(World world, Random random, int chunkX, int chunkZ) {
GenerateSurface
	}
	
	public void generateNether(World world, Random random, int chunkX, int chunkZ) {
GenerateNether
	}
	
	public void generateEnd(World world, Random random, int chunkX, int chunkZ) {
GenerateEnd
	}
	
	public void registerRenderers() {
		
	}
	
	public int addFuel(ItemStack fuel) {
		return 0;
	}
	
	//Setup
	static {
		//Set elementHere_ore
		elementHere_ore = new ElementHereOreBlock();
		
		//Set elementHere_ore's block data
		elementHere_ore.setHardness(hardnessF);
		elementHere_ore.setResistance(resistanceF);
		elementHere_ore.setLightLevel(lightLevelF);
		elementHere_ore.setLightOpacity(lightOpacity);
		elementHere_ore.setHarvestLevel("pickaxe", harvestLevel);
		
		//Set elementHere_ore's creative tab
		elementHere_ore.setCreativeTab(ModName.ModNameTab);
		
		//Set elementHere_ore's unlocalized name
		elementHere_ore.setUnlocalizedName("elementHere_ore");
	}
	
	//Actual Block Object
	static class ElementHereOreBlock extends Block {
		
		int a1 = 0;
		int a2 = 0;
		int a3 = 0;
		int a4 = 0;
		int a5 = 0;
		int a6 = 0;

DropDeclaration
		
		boolean red = false;
		
		protected ElementHereOreBlock() {
			//Set Material
			super(Material.ROCK);
			
			//Set Sound Type
			setSoundType(SoundType.STONE);
DropInitiate

		}
		
		@Override
		public void onBlockAdded(World world, BlockPos blockPos, IBlockState blockState) {
			int i = blockPos.getX();
			int j = blockPos.getY();
			int k = blockPos.getZ();
			
			world.scheduleUpdate(new BlockPos(i, j, k), this, this.tickRate(world));
		}
		
		@Override
		public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos blockPos, EnumFacing side) {
			return red ? 15 : 0;
		}
		
		@Override
		public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos blockPos, EnumFacing side) {
			return red ? 15 : 0;
		}
		
		@SideOnly(Side.CLIENT)
		@Override
		public BlockRenderLayer getBlockLayer() {
			return BlockRenderLayer.SOLID;
		}
		
		@Override
		public AxisAlignedBB getBoundingBox(IBlockState blockState, IBlockAccess blockAccess, BlockPos blockPos) {
			return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
		}
		
		@Override
		public int tickRate(World world) {
			return 10;
		}
		
DropMethod

	}
	
	//Initializations
	public void serverLoad(FMLServerStartingEvent e) {
		//ServerLoad
		
	}
	
	public void preInit(FMLPreInitializationEvent e) {
		//PreInit
		elementHere_ore.setRegistryName("elementHere_ore");
		GameRegistry.register(elementHere_ore);
		GameRegistry.register(new ItemBlock(elementHere_ore).setRegistryName(elementHere_ore.getRegistryName()));
		
	}
	
	public void load(FMLInitializationEvent e) {
		//Rendering Item
		if(e.getSide() == Side.CLIENT) {
			Minecraft.getMinecraft().getRenderItem().getItemModelMesher().register(Item.getItemFromBlock(elementHere_ore), 0, new ModelResourceLocation("modId:elementHere_ore", "inventory"));
		}
		
		//Recipes
		GameRegistry.addSmelting(
				elementHere_ore, 
				new ItemStack(ElementNoOreGem.elementNoOre_gem, 1),
				1.0F
		);
		
	}

}
